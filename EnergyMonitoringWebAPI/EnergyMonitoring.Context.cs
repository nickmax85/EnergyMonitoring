//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EnergyMonitoringWebAPI
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EnergyMonitoringContext : DbContext
    {
        public EnergyMonitoringContext()
            : base("name=EnergyMonitoringContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Alarm> Alarms { get; set; }
        public virtual DbSet<Config> Configs { get; set; }
        public virtual DbSet<Device> Devices { get; set; }
        public virtual DbSet<Equipment> Equipments { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<Record> Records { get; set; }
        public virtual DbSet<Sensor> Sensors { get; set; }
        public virtual DbSet<Unit> Units { get; set; }
        public virtual DbSet<Activity> Activity { get; set; }
    
        public virtual int spGetLastDaysAvgRecords(Nullable<int> days)
        {
            var daysParameter = days.HasValue ?
                new ObjectParameter("days", days) :
                new ObjectParameter("days", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spGetLastDaysAvgRecords", daysParameter);
        }
    
        public virtual ObjectResult<spGetSensors_Result> spGetSensors()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetSensors_Result>("spGetSensors");
        }
    
        public virtual ObjectResult<spGetFilterAlarms_Result> spGetFilterAlarms(Nullable<System.DateTime> start, Nullable<System.DateTime> end)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFilterAlarms_Result>("spGetFilterAlarms", startParameter, endParameter);
        }
    
        public virtual ObjectResult<spGetFilterRecordsAvg_Result> spGetFilterRecordsAvg(Nullable<System.DateTime> start, Nullable<System.DateTime> end, Nullable<int> groupId, Nullable<int> equipmentId)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("groupId", groupId) :
                new ObjectParameter("groupId", typeof(int));
    
            var equipmentIdParameter = equipmentId.HasValue ?
                new ObjectParameter("equipmentId", equipmentId) :
                new ObjectParameter("equipmentId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetFilterRecordsAvg_Result>("spGetFilterRecordsAvg", startParameter, endParameter, groupIdParameter, equipmentIdParameter);
        }
    
        public virtual ObjectResult<spGetMaxValues_Result> spGetMaxValues(Nullable<System.DateTime> start, Nullable<System.DateTime> end)
        {
            var startParameter = start.HasValue ?
                new ObjectParameter("start", start) :
                new ObjectParameter("start", typeof(System.DateTime));
    
            var endParameter = end.HasValue ?
                new ObjectParameter("end", end) :
                new ObjectParameter("end", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetMaxValues_Result>("spGetMaxValues", startParameter, endParameter);
        }
    
        public virtual ObjectResult<spGetAvgFlowEquipments_Result> spGetAvgFlowEquipments(Nullable<int> year, Nullable<int> week, Nullable<int> weekday, Nullable<System.TimeSpan> timeStart, Nullable<System.TimeSpan> timeEnd)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var weekParameter = week.HasValue ?
                new ObjectParameter("week", week) :
                new ObjectParameter("week", typeof(int));
    
            var weekdayParameter = weekday.HasValue ?
                new ObjectParameter("weekday", weekday) :
                new ObjectParameter("weekday", typeof(int));
    
            var timeStartParameter = timeStart.HasValue ?
                new ObjectParameter("timeStart", timeStart) :
                new ObjectParameter("timeStart", typeof(System.TimeSpan));
    
            var timeEndParameter = timeEnd.HasValue ?
                new ObjectParameter("timeEnd", timeEnd) :
                new ObjectParameter("timeEnd", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvgFlowEquipments_Result>("spGetAvgFlowEquipments", yearParameter, weekParameter, weekdayParameter, timeStartParameter, timeEndParameter);
        }
    
        public virtual ObjectResult<spGetAvgFlowSum2_Result> spGetAvgFlowSum2(Nullable<int> year, Nullable<int> weekday, Nullable<System.TimeSpan> timeStart, Nullable<System.TimeSpan> timeEnd)
        {
            var yearParameter = year.HasValue ?
                new ObjectParameter("year", year) :
                new ObjectParameter("year", typeof(int));
    
            var weekdayParameter = weekday.HasValue ?
                new ObjectParameter("weekday", weekday) :
                new ObjectParameter("weekday", typeof(int));
    
            var timeStartParameter = timeStart.HasValue ?
                new ObjectParameter("timeStart", timeStart) :
                new ObjectParameter("timeStart", typeof(System.TimeSpan));
    
            var timeEndParameter = timeEnd.HasValue ?
                new ObjectParameter("timeEnd", timeEnd) :
                new ObjectParameter("timeEnd", typeof(System.TimeSpan));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetAvgFlowSum2_Result>("spGetAvgFlowSum2", yearParameter, weekdayParameter, timeStartParameter, timeEndParameter);
        }
    }
}
